import logging
import html # –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
import os # –î–æ–±–∞–≤–ª–µ–Ω os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from datetime import datetime # –î–æ–±–∞–≤–ª–µ–Ω–∞ datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
# import re # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –∑–¥–µ—Å—å, —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞
import markdown # <--- Added import for the markdown library

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ContentType
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters.callback_data import CallbackData
# from aiogram.utils.formatting import Text, Markdown # <--- REMOVE Old import with incorrect Markdown
from aiogram.utils.formatting import Text # <--- Corrected import, Text might be used elsewhere

from apscheduler.schedulers.asyncio import AsyncIOScheduler # –î–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ç–∏–ø–∞ scheduler

from app.services import rss_service, ai_service, telegram_service
from app.config import (
    OPENAI_IMAGE_MODEL, ADMIN_ID, 
    RSS_FEED_URL, POSTING_INTERVAL_MINUTES, POSTED_LINKS_FILE,
    IMAGE_GENERATION_ENABLED, IMAGE_SOURCE_PRIORITY, # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ post_latest_news
    TELEGRAM_CHANNEL_ID, AI_PROVIDER, OPENROUTER_CHAT_MODEL # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è cmd_status
)
from app.utils.image_utils import get_final_image_url # <--- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
from app.utils.common import load_posted_links, markdown_v2_escape, save_posted_link # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ common.py

logger = logging.getLogger(__name__)
router = Router() # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Router

# --- FSM States for post preparation ---
class PreparePostStates(StatesGroup):
    awaiting_confirmation = State()

# --- CallbackData for post confirmation ---
class PostConfirmationCallback(CallbackData, prefix="post_confirm"):
    action: str # "publish" or "cancel"
    # We might add message_id or item_id later if needed for complex scenarios

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
admin_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="/status"), KeyboardButton(text="/check_rss")],
        [KeyboardButton(text="/post_now"), KeyboardButton(text="/prepare_post")],
        [KeyboardButton(text="/start_autopost"), KeyboardButton(text="/stop_autopost")],
        [KeyboardButton(text="/help")]
    ],
    resize_keyboard=True,
    one_time_keyboard=False
)

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_full_name_safe = markdown_v2_escape(message.from_user.full_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    if ADMIN_ID and message.from_user.id == ADMIN_ID:
        text_part1 = markdown_v2_escape(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name_safe}! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ AI –Ω–æ–≤–æ—Å—Ç–µ–π.")
        text_part2 = markdown_v2_escape("–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        full_text = f"{text_part1}\n{text_part2}"
        await message.answer(
            full_text,
            reply_markup=admin_keyboard,
            parse_mode=ParseMode.MARKDOWN_V2.value
        )
    else:
        full_text = markdown_v2_escape(f"–ü—Ä–∏–≤–µ—Ç, {user_full_name_safe}! –Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ AI –Ω–æ–≤–æ—Å—Ç–µ–π.")
        await message.answer(
            full_text,
            parse_mode=ParseMode.MARKDOWN_V2.value
        )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text_user = (
        f"{markdown_v2_escape('–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å—Ç–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS-–ª–µ–Ω—Ç –Ω–∞ —Ç–µ–º—É AI.')}\n\n"
        f"{markdown_v2_escape('–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:')}\n"
        f"{markdown_v2_escape('- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS.')}\n"
        f"{markdown_v2_escape('- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é AI.')}\n"
        f"{markdown_v2_escape('- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ—Å—Ç—É.')}"
    )
    help_text_admin = (
        f"\n\n{markdown_v2_escape('–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')}\n"
        f"`/status` {markdown_v2_escape('- –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.')}\n"
        f"`/check_rss` {markdown_v2_escape('- –ø—Ä–æ–≤–µ—Ä–∏—Ç—å RSS-–ª–µ–Ω—Ç—É –∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –Ω–æ–≤–æ—Å—Ç–∏ (–±–µ–∑ –ø–æ—Å—Ç–∏–Ω–≥–∞).')}\n"
        f"`/post_now` {markdown_v2_escape('- –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø–æ—Å—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å (–µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞).')}\n"
        f"`/prepare_post` {markdown_v2_escape('- –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å, –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ—Å—Ç–∏–Ω–≥–æ–º.')}\n"
        f"`/start_autopost` {markdown_v2_escape('- –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π.')}\n"
        f"`/stop_autopost` {markdown_v2_escape('- –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π.')}\n"
        f"`/show_logs` {markdown_v2_escape('- –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (TODO).')}"
    )

    full_help_text = help_text_user
    if ADMIN_ID and message.from_user.id == ADMIN_ID:
        full_help_text += help_text_admin

    await message.reply(full_help_text, parse_mode=ParseMode.MARKDOWN_V2.value)

@router.message(Command("check_rss"))
async def cmd_check_rss(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_rss –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ RSS –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /check_rss")
    if message.from_user.id != ADMIN_ID:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    if not RSS_FEED_URL:
        await message.reply("URL RSS-–ª–µ–Ω—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
        return

    await message.reply("–ü—Ä–æ–≤–µ—Ä–∫–∞ RSS-–ª–µ–Ω—Ç—ã... ‚è≥")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π
        # feed_items = await rss_service.fetch_rss_feed(RSS_FEED_URL) # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ª–µ–Ω—Ç—ã
        feed_items = await rss_service.fetch_feed_entries() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        if feed_items:
            await message.reply(f"‚úÖ RSS-–ª–µ–Ω—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ ({RSS_FEED_URL}). –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(feed_items)}")
        else:
            await message.reply(f"RSS-–ª–µ–Ω—Ç–∞ ({RSS_FEED_URL}) –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RSS-–ª–µ–Ω—Ç—ã {RSS_FEED_URL}: {e}", exc_info=True)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ RSS: {e}")

@router.message(Command("post_now"))
async def cmd_post_now(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /post_now. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ—Å—Ç–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /post_now –æ—Ç user_id: {message.from_user.id}")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /post_now")
    await telegram_service.post_latest_news(bot=bot, channel_id=TELEGRAM_CHANNEL_ID, posted_links_file=POSTED_LINKS_FILE)
    await message.reply(markdown_v2_escape("–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."), parse_mode=ParseMode.MARKDOWN_V2.value)

@router.message(Command("status"))
async def cmd_status(message: Message, scheduler: AsyncIOScheduler, bot: Bot): # –î–æ–±–∞–≤–∏–ª–∏ bot –¥–ª—è DefaultBotProperties
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /status –æ—Ç user_id: {message.from_user.id}")
        return

    status_lines = [f"ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ AI News Poster*:\n"]
    status_lines.append(f"*–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞*: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    autopost_job = scheduler.get_job("scheduled_post_job")
    if autopost_job:
        status_lines.append(f"*–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥*: `–í–∫–ª—é—á–µ–Ω` ‚úÖ")
        next_run_time = autopost_job.next_run_time
        if next_run_time:
            if next_run_time.tzinfo:
                next_run_local = next_run_time.astimezone()
                status_lines.append(f"  *–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç*: `{next_run_local.strftime('%Y-%m-%d %H:%M:%S %Z')}`")
            else:
                status_lines.append(f"  *–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç*: `{next_run_time.strftime('%Y-%m-%d %H:%M:%S')}` \(UTC\)")
    else:
        status_lines.append(f"*–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥*: `–í—ã–∫–ª—é—á–µ–Ω` ‚ùå")
        if POSTING_INTERVAL_MINUTES == 0:
            status_lines.append(markdown_v2_escape(f"  (–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ .env: {POSTING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç - –∞–≤—Ç–æ–ø–æ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ)"))
        else:
            status_lines.append(markdown_v2_escape(f"  (–ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ .env: {POSTING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç)"))

    rss_feed_count = 1 if RSS_FEED_URL else 0
    status_lines.append(f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ RSS\-–ª–µ–Ω—Ç*: `{rss_feed_count}`")
    status_lines.append(f"*–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞*: `{POSTING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç`")
    status_lines.append(f"*–ö–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞*: `{markdown_v2_escape(str(TELEGRAM_CHANNEL_ID))}`")
    status_lines.append(f"*AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞*: `{markdown_v2_escape(AI_PROVIDER)}`")
    if AI_PROVIDER == "openrouter":
        status_lines.append(f"  *–ú–æ–¥–µ–ª—å OpenRouter*: `{markdown_v2_escape(OPENROUTER_CHAT_MODEL)}`")

    status_lines.append(f"*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*: `{'–í–∫–ª—é—á–µ–Ω–∞' if IMAGE_GENERATION_ENABLED else '–í—ã–∫–ª—é—á–µ–Ω–∞'}`")
    if IMAGE_GENERATION_ENABLED:
        status_lines.append(f"  *–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*: `{markdown_v2_escape(str(IMAGE_SOURCE_PRIORITY))}`")
        status_lines.append(f"  *–ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*: `{markdown_v2_escape(OPENAI_IMAGE_MODEL)}`")
    
    status_lines.append(f"*–§–∞–π–ª —Å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏*: `{markdown_v2_escape(POSTED_LINKS_FILE)}`")
    status_lines.append(markdown_v2_escape(f"*–¢–µ–∫—É—â–∏–π ParseMode –±–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)*: `{bot.default.parse_mode if bot.default else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`"))

    try:
        next_run = scheduler.get_job("scheduled_post_job").next_run_time if scheduler.get_job("scheduled_post_job") else None
        if next_run:
            if next_run.tzinfo:
                next_run_local = next_run.astimezone()
                status_lines.append(f"*–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç*: `{next_run_local.strftime('%Y-%m-%d %H:%M:%S %Z')}`")
            else:
                status_lines.append(f"*–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç*: `{next_run.strftime('%Y-%m-%d %H:%M:%S')}` \(UTC\)")
        else:
            status_lines.append(f"*–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç*: `–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ APScheduler: {e}", exc_info=True)
        # status_lines.append(markdown_v2_escape(f"*–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç*: `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ({str(e)})`"))
        # –°—Ç—Ä–æ–∫–∞ –≤—ã—à–µ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±–ª–æ–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –Ω–∞—á–∞–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏
        pass # –û—à–∏–±–∫–∞ —É–∂–µ –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞ –µ—Å–ª–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ –∏–Ω—Ñ–æ —É–∂–µ –µ—Å—Ç—å
        
    posted_links = load_posted_links(POSTED_LINKS_FILE)
    status_lines.append(f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤*: `{len(posted_links)}`")

    await message.reply("\n".join(status_lines), parse_mode=ParseMode.MARKDOWN_V2.value)

@router.message(Command("post_latest_news"))
async def cmd_post_latest_news(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /post_latest_news –æ—Ç user_id: {message.from_user.id}")
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=None)
        return

    await message.answer("–ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ RSS...")
    
    latest_news_items = await rss_service.get_latest_news(count=1)
    
    if not latest_news_items:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ RSS-–ª–µ–Ω—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    news_item = latest_news_items[0]
    title = news_item.get('title', "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    link = news_item.get('link', "")
    summary = news_item.get('summary') or news_item.get('description', "")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    content_detail = news_item.get('content')
    full_content = None
    if content_detail and isinstance(content_detail, list) and len(content_detail) > 0:
        full_content = content_detail[0].get('value')
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ RSS
    rss_image_url: str | None = None
    if hasattr(news_item, 'media_content') and news_item.media_content and isinstance(news_item.media_content, list):
        for media in news_item.media_content:
            if media.get('medium') == 'image' and media.get('url'):
                rss_image_url = media.get('url')
                break
    if not rss_image_url and hasattr(news_item, 'links'): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
        for link_info in news_item.links:
            if link_info.get('type', '').startswith('image/') and link_info.get('href'):
                rss_image_url = link_info.href
                break
    if not rss_image_url and hasattr(news_item, 'enclosures'): # –ò–Ω–æ–≥–¥–∞ –≤ enclosures
         for enclosure in news_item.enclosures:
            if enclosure.get('type', '').startswith('image/') and enclosure.get('href'):
                rss_image_url = enclosure.href
                break

    await message.answer(f"–ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: \"{title}\". –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å –ø–æ–º–æ—â—å—é AI...")
    
    ai_result = await ai_service.reformat_news_for_channel(
        news_title=title,
        news_summary=summary,
        news_link=link,
        news_content=full_content
    )
    
    if not ai_result:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    formatted_text, image_prompt = ai_result
    # final_image_url_to_post = rss_image_url # <--- –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞

    # # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ RSS –Ω–µ—Ç, –ò–õ–ò –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ DALL-E (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # # –°–µ–π—á–∞—Å: –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑ RSS, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç –æ—Ç AI –∏ DALL-E –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º.
    # if not final_image_url_to_post and image_prompt and OPENAI_IMAGE_MODEL:
    #     await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ (–ø—Ä–æ–º–ø—Ç: {image_prompt[:100]}...)")
    #     generated_dalle_url = await ai_service.generate_image_with_dalle(image_prompt)
    #     if generated_dalle_url:
    #         final_image_url_to_post = generated_dalle_url
    #         await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    #     else:
    #         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç DALL-E.")
    # elif rss_image_url:
    #      await message.answer("–ò—Å–ø–æ–ª—å–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ RSS-–ª–µ–Ω—Ç—ã.")
    # else:
    #     await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –í user_commands –º—ã –º–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    await message.answer("–û–ø—Ä–µ–¥–µ–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...")
    final_image_url_to_post = await get_final_image_url(news_item, image_prompt)

    if final_image_url_to_post:
        await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {final_image_url_to_post}")
    else:
        await message.answer("–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    await message.answer("–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª...")
    
    success = await telegram_service.post_to_channel(
        bot=bot, 
        text=formatted_text, 
        image_url=final_image_url_to_post
    )
    
    if success:
        await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

# --- –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º ---
@router.message(Command("start_autopost"))
async def cmd_start_autopost(message: Message, scheduler: AsyncIOScheduler, bot: Bot):
    """–í–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /start_autopost –æ—Ç {message.from_user.id}")
        return

    if POSTING_INTERVAL_MINUTES is None or POSTING_INTERVAL_MINUTES <= 0:
        await message.reply(
            markdown_v2_escape("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω. "
                               "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ POSTING_INTERVAL_MINUTES > 0 –≤ –≤–∞—à–µ–º .env —Ñ–∞–π–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞."),
            parse_mode=ParseMode.MARKDOWN_V2.value
        )
        return

    job = scheduler.get_job("scheduled_post_job")
    if job:
        await message.reply(markdown_v2_escape("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ –≤–∫–ª—é—á–µ–Ω."), parse_mode=ParseMode.MARKDOWN_V2.value)
    else:
        scheduler.add_job(
            telegram_service.post_latest_news,
            'interval',
            minutes=POSTING_INTERVAL_MINUTES,
            args=[bot, TELEGRAM_CHANNEL_ID, POSTED_LINKS_FILE],
            id="scheduled_post_job",
            name="Scheduled News Posting",
            replace_existing=True
        )
        if not scheduler.running: # –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫-—Ç–æ –∏–Ω–∞—á–µ
            scheduler.start()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ APScheduler –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.")
        await message.reply(
            markdown_v2_escape(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {POSTING_INTERVAL_MINUTES} –º–∏–Ω—É—Ç."),
            parse_mode=ParseMode.MARKDOWN_V2.value
        )
        logger.info(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {POSTING_INTERVAL_MINUTES} –º–∏–Ω.")

@router.message(Command("stop_autopost"))
async def cmd_stop_autopost(message: Message, scheduler: AsyncIOScheduler):
    """–í—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /stop_autopost –æ—Ç {message.from_user.id}")
        return

    job = scheduler.get_job("scheduled_post_job")
    if job:
        scheduler.remove_job("scheduled_post_job")
        await message.reply(markdown_v2_escape("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω."), parse_mode=ParseMode.MARKDOWN_V2.value)
        logger.info(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {message.from_user.id}")
    else:
        await message.reply(markdown_v2_escape("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É–∂–µ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω."), parse_mode=ParseMode.MARKDOWN_V2.value)

# --- –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Å—Ç–∏–Ω–≥ ---
@router.message(Command("prepare_post"))
async def cmd_prepare_post(message: Message, bot: Bot, state: FSMContext):
    """–ì–æ—Ç–æ–≤–∏—Ç –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ /prepare_post –æ—Ç {message.from_user.id}")
        return
    
    await message.answer(markdown_v2_escape("–ì–æ—Ç–æ–≤–ª—é –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–µ–≤—å—é... ‚è≥"), parse_mode=ParseMode.MARKDOWN_V2.value)

    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å (–Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é)
        latest_news_items = await rss_service.get_latest_news(count=1) # –ò—Å–ø–æ–ª—å–∑—É–µ–º count=1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
        if not latest_news_items:
            await message.answer(markdown_v2_escape("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ RSS-–ª–µ–Ω—Ç–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏."), parse_mode=ParseMode.MARKDOWN_V2.value)
            return
        
        news_item = latest_news_items[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é (–∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—É—é) –Ω–æ–≤–æ—Å—Ç—å
        title = news_item.get('title', "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = news_item.get('link', "")
        summary = news_item.get('summary') or news_item.get('description', "")
        content_detail = news_item.get('content')
        full_content = None
        if content_detail and isinstance(content_detail, list) and len(content_detail) > 0:
            full_content = content_detail[0].get('value')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —Ö–æ—Ç—è get_latest_news –¥–æ–ª–∂–µ–Ω —ç—Ç–æ —É—á–∏—Ç—ã–≤–∞—Ç—å)
        posted_links = load_posted_links(POSTED_LINKS_FILE)
        if link and link in posted_links:
            await message.answer(markdown_v2_escape(f"–≠—Ç–∞ –Ω–æ–≤–æ—Å—Ç—å —É–∂–µ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: [{markdown_v2_escape(title)}]({link})"), parse_mode=ParseMode.MARKDOWN_V2.value)
            return

        # 2. –†–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
        ai_result = await ai_service.reformat_news_for_channel(
            news_title=title,
            news_summary=summary,
            news_link=link,
            news_content=full_content
        )
        if not ai_result:
            await message.answer(markdown_v2_escape("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é AI –¥–ª—è –ø—Ä–µ–≤—å—é."), parse_mode=ParseMode.MARKDOWN_V2.value)
            return
        
        formatted_text, image_prompt = ai_result

        # 3. –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        final_image_url_to_post = await get_final_image_url(news_item, image_prompt) # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π news_item

        # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ FSM
        await state.set_state(PreparePostStates.awaiting_confirmation)
        await state.update_data(
            prepared_text=formatted_text, 
            prepared_image_url=final_image_url_to_post,
            news_link=link, # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω–æ–π
            news_title=title # –î–ª—è –ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        )
        
        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        preview_prefix = "--- –ü–†–ï–í–¨–Æ –ü–û–°–¢–ê ---\n\n" # Simple text prefix
        
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=PostConfirmationCallback(action="publish").pack()),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=PostConfirmationCallback(action="cancel").pack())
            ]
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å AI" –∏ "–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        ])

        if final_image_url_to_post:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_photo, —Ç–∞–∫ –∫–∞–∫ message.answer_photo –Ω–µ—Ç, –∞ message.reply_photo —Ç—Ä–µ–±—É–µ—Ç —Ñ–æ—Ç–æ –∏–∑ —Ñ–∞–π–ª–∞/ID
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=final_image_url_to_post,
                caption=preview_prefix + formatted_text, # AI now provides HTML, prefix is plain
                parse_mode=ParseMode.HTML.value, # Use HTML for preview caption
                reply_markup=confirm_kb
            )
        else:
            await message.answer(
                preview_prefix + formatted_text, # AI now provides HTML, prefix is plain
                parse_mode=ParseMode.HTML.value, # Use HTML for preview message
                reply_markup=confirm_kb,
                disable_web_page_preview=False
            )
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.", parse_mode=None) # Plain text for this simple message

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /prepare_post: {e}", exc_info=True)
        await message.answer(markdown_v2_escape(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–æ—Å—Ç–∞: {e}"), parse_mode=ParseMode.MARKDOWN_V2.value)
        await state.clear() # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏


@router.callback_query(PostConfirmationCallback.filter(F.action == "publish"), StateFilter(PreparePostStates.awaiting_confirmation))
async def cq_publish_prepared_post(query: CallbackQuery, callback_data: PostConfirmationCallback, bot: Bot, state: FSMContext):
    user_data = await state.get_data()
    prepared_text = user_data.get("prepared_text")
    prepared_image_url = user_data.get("prepared_image_url")
    news_link = user_data.get("news_link")
    news_title = user_data.get("news_title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")

    if not prepared_text:
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await state.clear()
        await query.message.edit_reply_markup(reply_markup=None)
        return

    await query.answer("–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª...") # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    success = await telegram_service.post_to_channel(
        bot=bot,
        text=prepared_text, # Pass HTML directly (it was stored as prepared_text from AI)
        image_url=prepared_image_url
    )

    await state.clear() # Clear state regardless of success, as the action is done.

    if success:
        if news_link:
            save_posted_link(POSTED_LINKS_FILE, news_link)
            logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å '{news_title}' ({news_link}) —á–µ—Ä–µ–∑ –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {query.from_user.id}")
        else:
            logger.info(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å '{news_title}' (–±–µ–∑ —Å—Å—ã–ª–∫–∏) —á–µ—Ä–µ–∑ –ø—Ä–µ–≤—å—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {query.from_user.id}")
        
        post_title_snippet = news_title[:50]
        # Construct HTML confirmation message, escaping the dynamic title part
        confirmation_text = f'‚úÖ –ü–æ—Å—Ç "<b>{html.escape(post_title_snippet)}</b>..." —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!'
        
        # Check content type of the original message to decide edit_text or edit_caption
        if query.message.content_type == ContentType.PHOTO:
            await query.message.edit_caption(
                caption=confirmation_text,
                reply_markup=None, # Remove buttons
                parse_mode=ParseMode.HTML.value
            )
        else: # Assuming it was a text message if not a photo
            await query.message.edit_text(
                text=confirmation_text, 
                reply_markup=None, # Remove buttons
                parse_mode=ParseMode.HTML.value
            )
    else:
        # Construct HTML error message, escaping the dynamic title part
        error_message_admin = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ '<b>{html.escape(news_title[:50])}</b>...' –≤ –∫–∞–Ω–∞–ª. –î–µ—Ç–∞–ª–∏ –≤ –ª–æ–≥–∞—Ö."
        if query.message.content_type == ContentType.PHOTO:
            await query.message.edit_caption(
                caption=error_message_admin,
                reply_markup=None, # Remove buttons
                parse_mode=ParseMode.HTML.value
            )
        else:
            await query.message.edit_text(
                text=error_message_admin, 
                reply_markup=None, # Remove buttons
                parse_mode=ParseMode.HTML.value
            )

@router.callback_query(PostConfirmationCallback.filter(F.action == "cancel"), StateFilter(PreparePostStates.awaiting_confirmation))
async def cq_cancel_prepared_post(query: CallbackQuery, callback_data: PostConfirmationCallback, state: FSMContext):
    user_data = await state.get_data()
    news_title = user_data.get("news_title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    
    await query.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear() # Clear state on cancellation

    # Construct HTML cancel message, escaping the dynamic title part
    cancel_text = f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ \"<b>{html.escape(news_title[:50])}</b>...\" –æ—Ç–º–µ–Ω–µ–Ω–∞."
    
    if query.message.content_type == ContentType.PHOTO:
        await query.message.edit_caption(
            caption=cancel_text,
            reply_markup=None, # Remove buttons
            parse_mode=ParseMode.HTML.value
        )
    else:
        await query.message.edit_text(
            text=cancel_text, 
            reply_markup=None, # Remove buttons
            parse_mode=ParseMode.HTML.value
        )
    logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏ '{news_title}' –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {query.from_user.id}")

# –ù–µ –∑–∞–±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å router –≤ app/bot.py: dp.include_router(user_commands.router) 