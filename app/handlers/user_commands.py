import logging
import html # –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML —Å–∏–º–≤–æ–ª–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
import os # –î–æ–±–∞–≤–ª–µ–Ω os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from datetime import datetime # –î–æ–±–∞–≤–ª–µ–Ω–∞ datetime –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

from aiogram import Router, Bot, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton # –î–æ–±–∞–≤–ª–µ–Ω—ã ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import hbold, hlink, escape_md # –î–æ–±–∞–≤–∏–ª escape_md

from app.services import rss_service, ai_service, telegram_service
from app.config import (
    OPENAI_IMAGE_MODEL, ADMIN_ID, 
    RSS_FEED_URLS, POSTING_INTERVAL_MINUTES, POSTED_LINKS_FILE,
    IMAGE_GENERATION_ENABLED, IMAGE_SOURCE_PRIORITY # –î–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ post_latest_news
)
from app.utils.image_utils import get_final_image_url # <--- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
from app.scheduler import POSTED_NEWS_LINKS # –î–æ–±–∞–≤–∏–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫

logger = logging.getLogger(__name__)
router = Router() # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Router

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
admin_kb = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="/post_latest_news"), KeyboardButton(text="/check_rss")],
    [KeyboardButton(text="/status")]
], resize_keyboard=True)

@router.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /start –æ—Ç user_id: {message.from_user.id}")
        await message.reply("–≠—Ç–æ—Ç –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=None)
        return
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold(escape_md(message.from_user.full_name))}!\\n–Ø –±–æ—Ç –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ AI-–Ω–æ–≤–æ—Å—Ç–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=admin_kb)

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /admin –æ—Ç user_id: {message.from_user.id}")
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=None)
        return
    await message.answer("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=admin_kb)

@router.message(Command("check_rss"))
async def cmd_check_rss(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_rss.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç RSS-–ª–µ–Ω—Ç—ã –∏ —Å–æ–æ–±—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç—è—Ö –∏ –∏—Ö —Å—Ç–∞—Ç—É—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /check_rss –æ—Ç user_id: {message.from_user.id}")
        # –ú–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=None)
        return

    await message.reply("–ü—Ä–æ–≤–µ—Ä—è—é RSS-–ª–µ–Ω—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode=None)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–æ–ª—å—à–µ –Ω–æ–≤–æ—Å—Ç–µ–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    latest_news_items = await rss_service.get_latest_news(count=10) 
    
    if not latest_news_items:
        await message.reply("–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –≤ RSS-–ª–µ–Ω—Ç–∞—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", parse_mode=None)
        return

    response_lines = ["üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ RSS-–ª–µ–Ω—Ç (–¥–æ 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö)*:\n"]
    for i, item in enumerate(latest_news_items):
        title = item.get('title', "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        link = item.get('link', "")
        source_feed = item.get('source_feed_url', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
        safe_title = escape_md(title)
        # –î–ª—è —Å—Å—ã–ª–∫–∏ hlink —Å–∞–º –¥–æ–ª–∂–µ–Ω–∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ–± —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ URL, –∞ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        safe_link_display_text = escape_md(link if link else "–ù–µ—Ç —Å—Å—ã–ª–∫–∏") 
        safe_source_feed = escape_md(source_feed)

        is_posted = "–î–∞ ‚úÖ" if link and link in POSTED_NEWS_LINKS else "–ù–µ—Ç ‚ùå"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º hlink –¥–ª—è —Å—Å—ã–ª–∫–∏
        # hlink(title, url) -> <a href="url">title</a> - —ç—Ç–æ –¥–ª—è HTML. –î–ª—è MarkdownV2 –Ω—É–∂–Ω–æ [text](url)
        # –ü–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é, —É–±–µ–¥–∏–≤—à–∏—Å—å, —á—Ç–æ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–º–∞—é—Ç Markdown
        # (—Ö–æ—Ç—è URL –æ–±—ã—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã, –Ω–æ link –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
        link_markdown = f"[{safe_link_display_text}]({link})" if link else safe_link_display_text

        line = (
            f"{i+1}\\. *{safe_title}*\n"
            f"   –ò—Å—Ç–æ—á–Ω–∏–∫: _{safe_source_feed}_\n"
            f"   –°—Å—ã–ª–∫–∞: {link_markdown}\n"
            f"   –£–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {is_posted}\n"
        )
        response_lines.append(line)
    
    full_response = "\n".join(response_lines)
    
    # –í Telegram –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(full_response) > 4096:
        full_response = full_response[:4090] + "\\.\\.\\." # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
        
    await message.reply(full_response, parse_mode="MarkdownV2", disable_web_page_preview=True)

@router.message(Command("status"))
async def cmd_status(message: Message, bot: Bot): # –î–æ–±–∞–≤–∏–ª–∏ bot –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ scheduler
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /status –æ—Ç user_id: {message.from_user.id}")
        return

    status_lines = [f"ü§ñ *–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ AI News Poster*:
"]
    status_lines.append(f"*–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞*: –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ")
    status_lines.append(f"*–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ RSS-–ª–µ–Ω—Ç*: `{len(RSS_FEED_URLS)}`")
    status_lines.append(f"*–ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞*: `{POSTING_INTERVAL_MINUTES}` –º–∏–Ω—É—Ç")
    status_lines.append(f"*–ó–∞–ø–æ–º–Ω–µ–Ω–æ —Å—Å—ã–ª–æ–∫ (–≤ –ø–∞–º—è—Ç–∏)*: `{len(POSTED_NEWS_LINKS)}`")

    links_in_file_count = 0
    if POSTED_LINKS_FILE and os.path.exists(POSTED_LINKS_FILE):
        try:
            with open(POSTED_LINKS_FILE, 'r', encoding='utf-8') as f:
                links_in_file_count = sum(1 for _ in f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {POSTED_LINKS_FILE} –¥–ª—è /status: {e}")
            links_in_file_count = "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è"
    status_lines.append(f"*–ó–∞–ø–æ–º–Ω–µ–Ω–æ —Å—Å—ã–ª–æ–∫ (–≤ —Ñ–∞–π–ª–µ)*: `{links_in_file_count}`")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ
    next_run_info = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å scheduler –∏–∑ –æ–±—ä–µ–∫—Ç–∞ bot (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —Ç—É–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω –≤ main)
        # –í aiogram 3, –µ—Å–ª–∏ dp["scheduler"] = scheduler, —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–∞–∫:
        scheduler = bot["scheduler"] # –∏–ª–∏ message.bot["scheduler"]
        if scheduler:
            jobs = scheduler.get_jobs()
            if jobs:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –æ–¥–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞
                # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –µ—Å–ª–∏ –∑–∞–¥–∞—á –Ω–µ—Å–∫–æ–ª—å–∫–æ, –∏—Å–∫–∞—Ç—å –ø–æ id
                next_run_time = jobs[0].next_run_time
                if next_run_time:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è, —É—á–∏—Ç—ã–≤–∞—è —Ç–∞–π–º–∑–æ–Ω—É —à–µ–¥—É–ª–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å)
                    # next_run_time —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å aware datetime, –µ—Å–ª–∏ –≤ —à–µ–¥—É–ª–µ—Ä–µ –µ—Å—Ç—å —Ç–∞–π–º–∑–æ–Ω–∞
                    next_run_info = escape_md(next_run_time.strftime("%Y-%m-%d %H:%M:%S %Z"))
                else:
                    next_run_info = "–ó–∞–¥–∞—á–∏ –µ—Å—Ç—å, –Ω–æ –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            else:
                next_run_info = "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
        else:
            next_run_info = "–≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            logger.warning("–≠–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bot context –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status")
    except KeyError:
        next_run_info = "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–æ—Ç–∞ (KeyError)."
        logger.warning("scheduler –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ bot context –ø–æ –∫–ª—é—á—É 'scheduler' –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /status")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ APScheduler: {e}", exc_info=True)
        next_run_info = f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ({escape_md(str(e))})"
        
    status_lines.append(f"*–°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–ø–æ—Å—Ç*: `{next_run_info}`")

    await message.reply("\n".join(status_lines), parse_mode="MarkdownV2")

@router.message(Command("post_latest_news"))
async def cmd_post_latest_news(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ—Å—Ç–∏."""
    if not ADMIN_ID or message.from_user.id != ADMIN_ID:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ /post_latest_news –æ—Ç user_id: {message.from_user.id}")
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", parse_mode=None)
        return

    await message.answer("–ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å –∏–∑ RSS...")
    
    latest_news_items = await rss_service.get_latest_news(count=1)
    
    if not latest_news_items:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ RSS-–ª–µ–Ω—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    news_item = latest_news_items[0]
    title = news_item.get('title', "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    link = news_item.get('link', "")
    summary = news_item.get('summary') or news_item.get('description', "")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    content_detail = news_item.get('content')
    full_content = None
    if content_detail and isinstance(content_detail, list) and len(content_detail) > 0:
        full_content = content_detail[0].get('value')
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ RSS
    rss_image_url: str | None = None
    if hasattr(news_item, 'media_content') and news_item.media_content and isinstance(news_item.media_content, list):
        for media in news_item.media_content:
            if media.get('medium') == 'image' and media.get('url'):
                rss_image_url = media.get('url')
                break
    if not rss_image_url and hasattr(news_item, 'links'): # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—è—Ö
        for link_info in news_item.links:
            if link_info.get('type', '').startswith('image/') and link_info.get('href'):
                rss_image_url = link_info.href
                break
    if not rss_image_url and hasattr(news_item, 'enclosures'): # –ò–Ω–æ–≥–¥–∞ –≤ enclosures
         for enclosure in news_item.enclosures:
            if enclosure.get('type', '').startswith('image/') and enclosure.get('href'):
                rss_image_url = enclosure.href
                break

    await message.answer(f"–ù–æ–≤–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∞: \"{title}\". –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å –ø–æ–º–æ—â—å—é AI...")
    
    ai_result = await ai_service.reformat_news_for_channel(
        news_title=title,
        news_summary=summary,
        news_link=link,
        news_content=full_content
    )
    
    if not ai_result:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é AI. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    formatted_text, image_prompt = ai_result
    # final_image_url_to_post = rss_image_url # <--- –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞

    # # –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–∑ RSS –Ω–µ—Ç, –ò–õ–ò –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –≤—Å–µ–≥–¥–∞ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —á–µ—Ä–µ–∑ DALL-E (–º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    # # –°–µ–π—á–∞—Å: –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑ RSS, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–º–ø—Ç –æ—Ç AI –∏ DALL-E –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º.
    # if not final_image_url_to_post and image_prompt and OPENAI_IMAGE_MODEL:
    #     await message.answer(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ (–ø—Ä–æ–º–ø—Ç: {image_prompt[:100]}...)")
    #     generated_dalle_url = await ai_service.generate_image_with_dalle(image_prompt)
    #     if generated_dalle_url:
    #         final_image_url_to_post = generated_dalle_url
    #         await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    #     else:
    #         await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –æ—Ç DALL-E.")
    # elif rss_image_url:
    #      await message.answer("–ò—Å–ø–æ–ª—å–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ RSS-–ª–µ–Ω—Ç—ã.")
    # else:
    #     await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –Ω–µ –±—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ.")

    # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    # –í user_commands –º—ã –º–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å
    await message.answer("–û–ø—Ä–µ–¥–µ–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º...")
    final_image_url_to_post = await get_final_image_url(news_item, image_prompt)

    if final_image_url_to_post:
        await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: {final_image_url_to_post}")
    else:
        await message.answer("–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    await message.answer("–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª...")
    
    success = await telegram_service.post_to_channel(
        bot=bot, 
        text=formatted_text, 
        image_url=final_image_url_to_post
    )
    
    if success:
        await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

# –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ RSS-–ª–µ–Ω—Ç—ã, —Å—Ç–∏–ª—è –ø–æ—Å—Ç–æ–≤ –∏ —Ç.–¥.
# –ù–µ –∑–∞–±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å router –≤ app/bot.py: dp.include_router(user_commands.router) 